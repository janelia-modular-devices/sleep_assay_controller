* Header                                                           :noexport:

  #+MACRO: name sleep_assay_controller
  #+MACRO: version 2.0
  #+MACRO: license BSD, Open-Source Hardware
  #+MACRO: url https://github.com/janelia-modular-devices/sleep_assay_controller
  #+AUTHOR: Peter Polidoro
  #+EMAIL: peter@polidoro.io

* Description

  This device controls the IR and visible backlights in the sleep assay rig
  along with the backlight cooling fans, white lights, buzzers and indicator
  lights.

* Usage Instructions

** Arduino Serial Monitor

   #+BEGIN_SRC sh
     # Open terminal, set baud rate to 115200 and set to append newline to
     # each request sent to the device.
     ?
     # {
     #   "id": "?",
     #   "result": {
     #     "device_id": {
     #       "name": "sleep_assay_controller",
     #       "form_factor": "3x2",
     #       "serial_number": 0
     #     },
     #     "api": {
     #       "firmware": [
     #         "SleepAssayController"
     #       ],
     #       "verbosity": "NAMES",
     #       "functions": [
     #         "setIrBacklightAndFanOnAtPower",
     #         "setIrBacklightAndFanOnAtIntensity",
     #         "setVisibleBacklightAndIndicatorOnAtPower",
     #         "setVisibleBacklightAndIndicatorOnAtIntensity",
     #         "setWhiteLightAndIndicatorOnAtPower",
     #         "setBuzzerAndIndicatorOnAtPower",
     #         "getAssayStart",
     #         "getAssayEnd",
     #         "getAssayDuration",
     #         "getExperimentStart",
     #         "getExperimentEnd",
     #         "getExperimentDuration",
     #         "getEntrainmentStart",
     #         "getExperimentInfo",
     #         "getExperimentDayInfo",
     #         "addExperimentDay",
     #         "addExperimentDays",
     #         "addExperimentDayCopy",
     #         "addExperimentDayCopies",
     #         "removeLastExperimentDay",
     #         "removeAllExperimentDays",
     #         "setExperimentDayVisibleBacklight",
     #         "setExperimentDayWhiteLight",
     #         "setExperimentDayBuzzer",
     #         "getAssayStatus"
     #       ],
     #       "parameters": [
     #         "experiment_day",
     #         "visible_backlight_delay",
     #         "visible_backlight_duration",
     #         "buzzer_delay",
     #         "buzzer_duration",
     #         "day_count"
     #       ],
     #       "properties": [
     #         "visibleBacklightFrequency",
     #         "visibleBacklightDutyCycle",
     #         "whiteLightEntrainmentPower",
     #         "whiteLightRecoveryPower",
     #         "whiteLightStartTime",
     #         "whiteLightOnDuration",
     #         "buzzerOnDurationMin",
     #         "buzzerOnDurationMax",
     #         "buzzerWaitMin",
     #         "buzzerWaitMax",
     #         "cameraTriggerFrequency",
     #         "entrainmentDuration",
     #         "recoveryDuration",
     #         "testingDayDuration"
     #       ],
     #       "callbacks": [
     #         "setIrBacklightAndFanOn",
     #         "setIrBacklightAndFanOff",
     #         "toggleIrBacklightAndFan",
     #         "setVisibleBacklightAndIndicatorOn",
     #         "setVisibleBacklightAndIndicatorOff",
     #         "toggleVisibleBacklightAndIndicator",
     #         "setWhiteLightAndIndicatorOn",
     #         "setWhiteLightAndIndicatorOff",
     #         "toggleWhiteLightAndIndicator",
     #         "setBuzzerAndIndicatorOn",
     #         "setBuzzerAndIndicatorOff",
     #         "toggleBuzzerAndIndicator",
     #         "toggleAll",
     #         "startCameraTrigger",
     #         "stopCameraTrigger",
     #         "runAssay",
     #         "testAssay",
     #         "stopAssay"
     #       ]
     #     }
     #   }
     # }
     #
     # First, set all properties to defaults.
     #
     setPropertiesToDefaults [ALL]
     # {
     #   "id": "setPropertiesToDefaults",
     #   "result": null
     # }
     #
     # Then get epoch time on the client computer using one of any number of
     # ways.
     #
     # Web Page:
     #
     # [[https://www.epochconverter.com/]]
     #
     # Bash: ndate +%s
     #
     # Example: epoch_time = 1543617175
     #
     # Set the time on the device:
     #
     setTime 1543617175
     # {
     #   "id": "setTime",
     #   "result": null
     # }
     #
     # Check the date and time make sure this matches the local date and
     # time.
     #
     now
     # {
     #   "id": "now",
     #   "result": {
     #     "year": 2018,
     #     "month": 11,
     #     "day": 30,
     #     "hour": 18,
     #     "minute": 32,
     #     "second": 56
     #   }
     # }
     #
     # If it is off by a few hours, the time zone may need to be adjusted.
     # For example, for daylight savings.
     #
     timeZoneOffset setValue -5
     # {
     #   "id": "timeZoneOffset",
     #   "result": -5
     # }
     # Set IR backlight calibration
     irBacklightPowerToIntensityRatio setValue [5.35]
     # {
     #   "id": "irBacklightPowerToIntensityRatio",
     #   "result": [
     #     5.350000
     #   ]
     # }
     # Set visible backlight calibration
     visibleBacklightPowerToIntensityRatio setValue [14.62]
     # {
     #   "id": "visibleBacklightPowerToIntensityRatio",
     #   "result": [
     #     14.620000
     #   ]
     # }
     irBacklightIntensityMax setValue [12]
     # {
     #   "id": "irBacklightIntensityMax",
     #   "result": [
     #     12.000000
     #   ]
     # }
     getPropertyValues [SleepAssayController]
     # {
     #   "id": "getPropertyValues",
     #   "result": {
     #     "visibleBacklightFrequency": 10.000000,
     #     "visibleBacklightDutyCycle": 50,
     #     "whiteLightEntrainmentPower": 50,
     #     "whiteLightRecoveryPower": 50,
     #     "whiteLightStartTime": 9,
     #     "whiteLightOnDuration": 12,
     #     "buzzerOnDurationMin": 1,
     #     "buzzerOnDurationMax": 4,
     #     "buzzerWaitMin": 1,
     #     "buzzerWaitMax": 3,
     #     "cameraTriggerFrequency": 0.500000,
     #     "entrainmentDuration": 2,
     #     "recoveryDuration": 2,
     #     "testingDayDuration": 24
     #   }
     # }
     getAssayDuration
     # {
     #   "id":"getAssayDuration",
     #   "result":4
     # }
     entrainmentDuration setValue 1
     # {
     #   "id":"entrainmentDuration",
     #   "result":1
     # }
     recoveryDuration setValue 1
     # {
     #   "id":"recoveryDuration",
     #   "result":1
     # }
     getAssayDuration
     # {
     #   "id":"getAssayDuration",
     #   "result":2
     # }
     getExperimentInfo
     # {
     #   "id":"getExperimentInfo",
     #   "result":[]
     # }
     addExperimentDay
     # {
     #   "id":"addExperimentDay",
     #   "result":0
     # }
     getExperimentInfo
     # {
     #   "id": "getExperimentInfo",
     #   "result": [
     #     {
     #       "visible_backlight_intensity": 0.000000,
     #       "visible_backlight_delay": 0.000000,
     #       "visible_backlight_duration": 0.000000,
     #       "white_light_power": 0.000000,
     #       "buzzer_power": 0.000000,
     #       "buzzer_delay": 0.000000,
     #       "buzzer_duration": 0.000000
     #     }
     #   ]
     # }
     setExperimentDayVisibleBacklight 0 5.0 0 12
     # {
     #   "id": "setExperimentDayVisibleBacklight",
     #   "result": {
     #     "visible_backlight_intensity": 5.000000,
     #     "visible_backlight_delay": 0.000000,
     #     "visible_backlight_duration": 12.000000,
     #     "white_light_power": 75.000000,
     #     "buzzer_power": 0.000000,
     #     "buzzer_delay": 0.000000,
     #     "buzzer_duration": 0.000000
     #   }
     # }
     setExperimentDayWhiteLight 0 75
     # {
     #   "id": "setExperimentDayWhiteLight",
     #   "result": {
     #     "visible_backlight_intensity": 0.000000,
     #     "visible_backlight_delay": 0.000000,
     #     "visible_backlight_duration": 0.000000,
     #     "white_light_power": 75.000000,
     #     "buzzer_power": 0.000000,
     #     "buzzer_delay": 0.000000,
     #     "buzzer_duration": 0.000000
     #   }
     # }
     addExperimentDayCopy 0
     # {
     #   "id":"addExperimentDayCopy",
     #   "result":1
     # }
     setExperimentDayBuzzer 1 50 3 12
     # {
     #   "id": "setExperimentDayBuzzer",
     #   "result": {
     #     "visible_backlight_intensity": 5.000000,
     #     "visible_backlight_delay": 0.000000,
     #     "visible_backlight_duration": 12.000000,
     #     "white_light_power": 75.000000,
     #     "buzzer_power": 50.000000,
     #     "buzzer_delay": 3.000000,
     #     "buzzer_duration": 12.000000
     #   }
     # }
     getExperimentInfo
     # {
     #   "id": "getExperimentInfo",
     #   "result": [
     #     {
     #       "visible_backlight_intensity": 5.000000,
     #       "visible_backlight_delay": 0.000000,
     #       "visible_backlight_duration": 12.000000,
     #       "white_light_power": 75.000000,
     #       "buzzer_power": 0.000000,
     #       "buzzer_delay": 0.000000,
     #       "buzzer_duration": 0.000000
     #     },
     #     {
     #       "visible_backlight_intensity": 5.000000,
     #       "visible_backlight_delay": 0.000000,
     #       "visible_backlight_duration": 12.000000,
     #       "white_light_power": 75.000000,
     #       "buzzer_power": 50.000000,
     #       "buzzer_delay": 3.000000,
     #       "buzzer_duration": 12.000000
     #     }
     #   ]
     # }
     getExperimentDuration
     # {
     #   "id": "getExperimentDuration",
     #   "result": 2
     # }
     getAssayDuration
     # {
     #   "id": "getAssayDuration",
     #   "result": 4
     # }
     testAssay
     # {
     #   "id": "testAssay",
     #   "result": null
     # }
     getAssayStatus
     # {
     #   "id": "getAssayStatus",
     #   "result": {
     #     "time_now": 1543617266,
     #     "date_time_now": {
     #       "year": 2018,
     #       "month": 11,
     #       "day": 30,
     #       "hour": 18,
     #       "minute": 34,
     #       "second": 26
     #     },
     #     "assay_day": 0.666667,
     #     "phase": "ENTRAINMENT",
     #     "phase_day": 0.666667,
     #     "visible_backlight_intensity": 0.000000,
     #     "white_light_power": 50.000000,
     #     "buzzer_power": 0.000000,
     #     "buzzing": false,
     #     "testing": true
     #   }
     # }
     stopAssay
     # {
     #   "id": "stopAssay",
     #   "result": null
     # }
     runAssay
     # {
     #   "id": "runAssay",
     #   "result": null
     # }
     getAssayEnd
     # {
     #   "id": "getAssayEnd",
     #   "result": {
     #     "year": 2018,
     #     "month": 12,
     #     "day": 4,
     #     "hour": 9,
     #     "minute": 0,
     #     "second": 0
     #   }
     # }
     stopAssay
     # {
     #   "id": "stopAssay",
     #   "result": null
     # }
     removeAllExperimentDays
     # {
     #   "id": "removeAllExperimentDays",
     #   "result": null
     # }
     setIrBacklightAndFanOff
     # {
     #   "id": "setIrBacklightAndFanOff",
     #   "result": null
     # }
   #+END_SRC

** COMMENT Python

   #+BEGIN_SRC python
     from modular_client import ModularClient
     import time

     dev = ModularClient()
     dev.set_properties_to_defaults(['ALL'])
     dev.set_time(int(time.time()))
     time_zone_offset = -time.timezone/(60*60)
     t = time.time()
     if time.localtime(t).tm_isdst and time.daylight:
         time_zone_offset = -time.altzone/(60*60)
         dev.time_zone_offset('setValue',time_zone_offset)
         # -5
     dev.now()
     # {'year': 2018, 'month': 11, 'day': 30, 'hour': 17, 'minute': 44, 'second': 59}
     # check to make sure this matches the local date and time
     # Set IR backlight calibration
     dev.ir_backlight_power_to_intensity_ratio('setValue',[5.35])
     # [5.35]
     # Set visible backlight calibration
     dev.visible_backlight_power_to_intensity_ratio('setValue',[14.62])
     # [14.62]
     dev.ir_backlight_intensity_max('setValue',[12])
     # [12.0]
     dev.get_property_values(['SleepAssayController'])
     # {'visibleBacklightFrequency': 10.0,
     #  'visibleBacklightDutyCycle': 50,
     #  'whiteLightEntrainmentPower': 50,
     #  'whiteLightRecoveryPower': 50,
     #  'whiteLightStartTime': 9,
     #  'whiteLightOnDuration': 12,
     #  'buzzerOnDurationMin': 1,
     #  'buzzerOnDurationMax': 4,
     #  'buzzerWaitMin': 1,
     #  'buzzerWaitMax': 3,
     #  'cameraTriggerFrequency': 0.5,
     #  'entrainmentDuration': 2,
     #  'recoveryDuration': 2,
     #  'testingDayDuration': 24}
     dev.get_assay_duration()
     # 4
     dev.entrainment_duration('setValue',1)
     # 1
     dev.recovery_duration('setValue',1)
     # 1
     dev.get_assay_duration()
     # 2
     dev.get_experiment_info()
     # []
     dev.add_experiment_day()
     # 0
     dev.get_experiment_info()
     # [{'visible_backlight_intensity': 0.0,
     #   'visible_backlight_delay': 0.0,
     #   'visible_backlight_duration': 0.0,
     #   'white_light_power': 0.0,
     #   'buzzer_power': 0.0,
     #   'buzzer_delay': 0.0,
     #   'buzzer_duration': 0.0}]
     experiment_day = 0
     visible_backlight_intensity = 5.0
     visible_backlight_delay = 0
     visible_backlight_duration = 12
     dev.set_experiment_day_visible_backlight(experiment_day,
                                              visible_backlight_intensity,
                                              visible_backlight_delay,
                                              visible_backlight_duration)
     # {'visible_backlight_intensity': 5.0,
     #  'visible_backlight_delay': 0.0,
     #  'visible_backlight_duration': 12.0,
     #  'white_light_power': 75.0,
     #  'buzzer_power': 0.0,
     #  'buzzer_delay': 0.0,
     #  'buzzer_duration': 0.0}
     white_light_power = 75
     dev.set_experiment_day_white_light(experiment_day,white_light_power)
     # {'visible_backlight_intensity': 0.0,
     #  'visible_backlight_delay': 0.0,
     #  'visible_backlight_duration': 0.0,
     #  'white_light_power': 75.0,
     #  'buzzer_power': 0.0,
     #  'buzzer_delay': 0.0,
     #  'buzzer_duration': 0.0}
     dev.add_experiment_day_copy(0)
     # 1
     experiment_day = 1
     buzzer_power = 50
     buzzer_delay = 3
     buzzer_duration = 12
     dev.set_experiment_day_buzzer(experiment_day,
                                   buzzer_power,
                                   buzzer_delay,
                                   buzzer_duration)
     # {'visible_backlight_intensity': 5.0,
     #  'visible_backlight_delay': 0.0,
     #  'visible_backlight_duration': 12.0,
     #  'white_light_power': 75.0,
     #  'buzzer_power': 50.0,
     #  'buzzer_delay': 3.0,
     #  'buzzer_duration': 12.0}
     dev.get_experiment_info()
     # [{'visible_backlight_intensity': 5.0,
     #   'visible_backlight_delay': 0.0,
     #   'visible_backlight_duration': 12.0,
     #   'white_light_power': 75.0,
     #   'buzzer_power': 0.0,
     #   'buzzer_delay': 0.0,
     #   'buzzer_duration': 0.0},
     #  {'visible_backlight_intensity': 5.0,
     #   'visible_backlight_delay': 0.0,
     #   'visible_backlight_duration': 12.0,
     #   'white_light_power': 75.0,
     #   'buzzer_power': 50.0,
     #   'buzzer_delay': 3.0,
     #   'buzzer_duration': 12.0}]
     dev.get_experiment_duration()
     # 2
     dev.get_assay_duration()
     # 4
     dev.test_assay()
     dev.get_assay_status()
     # {'time_now': 1543618497,
     #  'date_time_now': {'year': 2018,
     #   'month': 11,
     #   'day': 30,
     #   'hour': 17,
     #   'minute': 54,
     #   'second': 57},
     #  'assay_day': 0.666667,
     #  'phase': 'ENTRAINMENT',
     #  'phase_day': 0.666667,
     #  'visible_backlight_intensity': 0.000000,
     #  'white_light_power': 50.000000,
     #  'buzzer_power': 0.000000,
     #  'buzzing': False,
     #  'testing': True}
     dev.stop_assay()
     dev.run_assay()
     dev.get_assay_end()
     # {'year': 2018, 'month': 12, 'day': 4, 'hour': 9, 'minute': 0, 'second': 0}
     dev.stop_assay()
     dev.remove_all_experiment_days()
     dev.set_ir_backlight_and_fan_off()
   #+END_SRC

** Matlab

   #+BEGIN_SRC matlab
     getAvailableComPorts()
     serial_port = 'COM9'; % example
     dev = ModularClient(serial_port);
     dev.open();
     dev.setPropertiesToDefaults({'ALL'});
     % look up time zone offset for your location
     % taking into account daylight savings time
     % if necessary
     % e.g.
     % U.S. Eastern = -5
     % U.S. Eastern daylight savings = -4
     time_zone_offset = -4;
     dev.timeZoneOffset('setValue',time_zone_offset);
     dev.setTime(etime(clock,[1970,1,1,0,0,0]));
     n = dev.now();
     t = clock;
     dev.adjustTime((t(4) - n.hour)*60*60);
     dev.now()
     %   year: 2018
     %  month: 11
     %    day: 30
     %   hour: 17
     % minute: 44
     % second: 59
     % check to make sure this matches the local date and time
     % Set IR backlight calibration
     dev.irBacklightPowerToIntensityRatio('setValue',{5.35});
     % Set visible backlight calibration
     dev.visibleBacklightPowerToIntensityRatio('setValue',{14.62});
     dev.irBacklightIntensityMax('setValue',{12});
     dev.getPropertyValues({'SleepAssayController'})
     %  visibleBacklightFrequency: 10.0
     %  visibleBacklightDutyCycle: 50
     % whiteLightEntrainmentPower: 50
     %    whiteLightRecoveryPower: 50
     %        whiteLightStartTime: 9
     %       whiteLightOnDuration: 12
     %        buzzerOnDurationMin: 1
     %        buzzerOnDurationMax: 4
     %              buzzerWaitMin: 1
     %              buzzerWaitMax: 3
     %     cameraTriggerFrequency: 0.5
     %        entrainmentDuration: 2
     %           recoveryDuration: 2
     %         testingDayDuration: 24
     dev.getAssayDuration()
     % 4
     dev.entrainmentDuration('setValue',1);
     dev.recoveryDuration('setValue',1);
     dev.getAssayDuration()
     % 2
     dev.getExperimentInfo()
     % Empty cell array: 0-by-1
     dev.addExperimentDay()
     % 0
     info = dev.getExperimentInfo();
     info{1}
     % visible_backlight_intensity: 0.0
     %     visible_backlight_delay: 0.0
     %  visible_backlight_duration: 0.0
     %           white_light_power: 0.0
     %                buzzer_power: 0.0
     %                buzzer_delay: 0.0
     %             buzzer_duration: 0.0
     experiment_day = 0;
     visible_backlight_intensity = 5.0;
     visible_backlight_delay = 0;
     visible_backlight_duration = 12;
     dev.setExperimentDayVisibleBacklight(experiment_day, ...
                                          visible_backlight_intensity, ...
                                          visible_backlight_delay, ...
                                          visible_backlight_duration);
     white_light_power = 75;
     dev.setExperimentDayWhiteLight(experiment_day,white_light_power);
     dev.addExperimentDayCopy(0)
     % 1
     experiment_day = 1;
     buzzer_power = 50;
     buzzer_delay = 3;
     buzzer_duration = 12;
     dev.setExperimentDayBuzzer(experiment_day, ...
                                buzzer_power, ...
                                buzzer_delay, ...
                                buzzer_duration);
     info = dev.getExperimentInfo();
     info{2}
     % visible_backlight_intensity: 5.0
     %     visible_backlight_delay: 0.0
     %  visible_backlight_duration: 12.0
     %           white_light_power: 75.0
     %                buzzer_power: 50.0
     %                buzzer_delay: 3.0
     %             buzzer_duration: 12.0
     dev.getExperimentDuration()
     % 2
     dev.getAssayDuration()
     % 4
     dev.testAssay();
     dev.getAssayStatus()
     %                    time_now: 1543618497
     %               date_time_now: [1x1 struct]
     %                   assay_day: 0.666667
     %                       phase: 'ENTRAINMENT'
     %                   phase_day: 0.666667
     % visible_backlight_intensity: 0
     %           white_light_power: 50
     %                buzzer_power: 0
     %                     buzzing: 0
     %                     testing: 1
     dev.runAssay();
     dev.getAssayEnd()
     %   year: 2018
     %  month: 12
     %    day: 4
     %   hour: 9
     % minute: 0
     % second: 0
     dev.stopAssay()
     dev.removeAllExperimentDays()
     dev.setIrBacklightAndFanOff()
   #+END_SRC

* Build Instructions
